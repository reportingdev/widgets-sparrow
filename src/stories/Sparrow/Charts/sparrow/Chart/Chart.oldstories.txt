/* eslint-disable import/no-extraneous-dependencies */
import React, { useCallback, useEffect, useState } from 'react'
import {
  array,
  boolean,
  color,
  number,
  select,
  text
} from '@storybook/addon-knobs'
import { action } from '@storybook/addon-actions'
import { heatMapData } from './mocks/index'
import Chart from './index'

import s from './style/chart.module.css'
import LabelsWrap from './label-wrap/label-wrap'
import { DateTime, Interval } from 'luxon'
import { random } from 'lodash'
import { ANIMATION_DURATION, ANIMATION_STEP_DELAY } from './constants'

export default {
  title: 'Charts',
  component: Chart
}

const getRandomArr = (length: number): number[] =>
  new Array(length).fill('').map(() => random(20, 120))

const generateDateLabels = (days: number = 28): string[] => {
  const to = DateTime.local()
  const from = to.minus({ days })

  return Interval.fromDateTimes(from, to)
    .splitBy({ days: 1 })
    .map((d) => d.start.toFormat('MM/dd'))
}

const getRandomColor = (): string => {
  const letters = '0123456789ABCDEF'
  let color = '#'
  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)]
  }
  return color
}

export const Bar = (): JSX.Element => {
  const defaultRange = 13
  const [datasets, setDatasets] = useState<any[]>([])
  const [labelsRange, setLabelsRange] = useState(defaultRange)
  const labels = generateDateLabels(labelsRange)

  const handleAnimateClick = (): void => {
    setLabelsRange((prev) => {
      const newRange = prev === defaultRange ? defaultRange + 5 : defaultRange
      setDatasets((prev) => {
        return prev.map(({ data, ...rest }) => ({
          ...rest,
          data: getRandomArr(newRange)
        }))
      })

      return newRange
    })
  }

  const addDataSet = useCallback(
    (type?: string) => {
      setDatasets((prev) => [
        ...prev,
        {
          label: `Data ${prev.length + 1}`,
          data: getRandomArr(labelsRange),
          backgroundColor: getRandomColor(),
          type
        }
      ])
    },
    [setDatasets]
  )

  const handleAddBarClick = (): void => {
    addDataSet()
  }

  const handleAddLineClick = (): void => {
    addDataSet('line')
  }

  const handleRemoveClick = (): void => {
    setDatasets((prev) => prev.slice(0, -1))
  }

  useEffect(() => {
    const timer = setTimeout(addDataSet, 2000)

    return () => clearTimeout(timer)
  }, [addDataSet])

  const data = {
    labels,
    datasets
  }

  const showLabels = boolean('Show labels', true)

  const config = {
    chart: {
      clickHandler: action('Bar click'),
      stacked: boolean('Stacked bars', false),
      barOpacity: number('Bar Opacity', 0.7),
      lineOpacity: number('Line opacity', 1),
      showBadge: boolean('Show sparrow badge', false)
    },
    scales: {
      x: {
        hide: boolean('hide X scale', false),
        styles: {
          'font-size': text('X axis font size', '11px'),
          color: color('X axis color', '#7E8B9D')
        },

        labelSpace: number('X axis labels space', 60)
      },
      y: {
        hide: boolean('hide Y scale', false),
        styles: {
          'font-size': text('Y axis font size', '11px'),
          color: color('Y axis color', '#7E8B9D')
        },

        labelSpace: number('Y axis labels space', 40)
      }
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION,
      stepDelay: boolean('Disable animation', false) ? 0 : ANIMATION_STEP_DELAY
    },
    tooltip: {
      hide: boolean('Hide tooltip', false),
      formatTitle: (title: any) => title,
      showInsideContainer: boolean('Show tooltip inside container', false)
    },
    loader: {
      show: boolean('Show loader', false)
    },
    showLabels
  }

  const chartSettings = {
    type: 'bar',
    data,
    config
  }

  const alingOptions = {
    Left: 'left',
    Right: 'right',
    Center: 'center'
  }
  const positionOptions = {
    Top: 'top',
    Right: 'right',
    Bottom: 'bottom',
    Left: 'left'
  }

  return (
    <div style={{ width: '40%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
        <button onClick={handleAddBarClick}>Add bar</button>
        <button onClick={handleAddLineClick}>Add line</button>
        <button onClick={handleRemoveClick}>Remove</button>
      </div>
      {showLabels ? (
        <LabelsWrap
          title={text('Chart title', '')}
          position={
            select(
              'Lables position',
              positionOptions,
              positionOptions.Top
            ) as any
          }
          chartSettings={chartSettings}
          labelsAlign={
            select('Labels align', alingOptions, alingOptions.Left) as any
          }
        />
      ) : (
        <Chart {...chartSettings} />
      )}
    </div>
  )
}

export const HorizontalBar = (): JSX.Element => {
  return (
    <div className={s.ChartWrapper}>
      <Chart
        type='horizontalBar'
        width={600}
        height={200}
        data={{ positive: 48, neutral: 44, negative: 8 }}
        colors={{
          positive: '#79d37d',
          neutral: '#e3e6e9',
          negative: '#f78389'
        }}
      />
    </div>
  )
}

export const Area = (): JSX.Element => {
  const defaultRange = 13
  const [datasets, setDatasets] = useState<any[]>([])
  const [labelsRange, setLabelsRange] = useState(defaultRange)
  const labels = generateDateLabels(labelsRange)

  const handleAnimateClick = (): void => {
    setLabelsRange((prev) => {
      const newRange = prev === defaultRange ? defaultRange + 5 : defaultRange
      setDatasets((prev) => {
        return prev.map(({ data, ...rest }) => ({
          ...rest,
          data: getRandomArr(newRange)
        }))
      })

      return newRange
    })
  }

  const addDataSet = useCallback(
    (type?: string) => {
      setDatasets((prev) => [
        ...prev,
        {
          label: `Data ${prev.length + 1}`,
          data: getRandomArr(labelsRange),
          backgroundColor: getRandomColor(),
          type
        }
      ])
    },
    [setDatasets]
  )

  const handleAddBarClick = (): void => {
    addDataSet()
  }

  const handleRemoveClick = (): void => {
    setDatasets((prev) => prev.slice(0, -1))
  }

  useEffect(() => {
    const timer = setTimeout(addDataSet, 2000)

    return () => clearTimeout(timer)
  }, [addDataSet])

  const data = {
    labels,
    datasets
  }

  const showLabels = boolean('Show labels', true)

  const config = {
    chart: {
      lineOpacity: number('Line opacity', 1),
      showBadge: boolean('Show sparrow badge', false)
    },
    scales: {
      x: {
        hide: boolean('hide X scale', false),
        styles: {
          'font-size': text('X axis font size', '11px'),
          color: color('X axis color', '#7E8B9D')
        },

        labelSpace: number('X axis labels space', 60)
      },
      y: {
        hide: boolean('hide Y scale', false),
        styles: {
          'font-size': text('Y axis font size', '11px'),
          color: color('Y axis color', '#7E8B9D')
        },
        labelSpace: number('Y axis labels space', 40),
        setUnreachableValues: boolean('Set unreachable values', true)
      }
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION,
      stepDelay: boolean('Disable animation', false) ? 0 : ANIMATION_STEP_DELAY
    },
    tooltip: {
      hide: boolean('Hide tooltip', false),
      showInsideContainer: boolean('Show tooltip inside container', false)
    },
    loader: {
      show: boolean('Show loader', false)
    },
    showLabels
  }

  const chartSettings = {
    type: 'area',
    data,
    config
  }

  const alingOptions = {
    Left: 'left',
    Right: 'right',
    Center: 'center'
  }
  const positionOptions = {
    Top: 'top',
    Right: 'right',
    Bottom: 'bottom',
    Left: 'left'
  }

  return (
    <div style={{ width: '40%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
        <button onClick={handleAddBarClick}>Add data</button>
        <button onClick={handleRemoveClick}>Remove</button>
      </div>
      {showLabels ? (
        <LabelsWrap
          title={text('Chart title', '')}
          position={
            select(
              'Lables position',
              positionOptions,
              positionOptions.Top
            ) as any
          }
          chartSettings={chartSettings}
          labelsAlign={
            select('Labels align', alingOptions, alingOptions.Left) as any
          }
        />
      ) : (
        <Chart {...chartSettings} />
      )}
    </div>
  )
}

export const Curve = (): JSX.Element => {
  const data = {
    labels: ['Bellow average', 'Average', 'Above average'],
    datasets: [0, 35, 70],
    value: number('Point value', 0, { min: 0, max: 100 })
  }

  const config = {
    scales: {
      x: {
        hide: boolean('hide axis', false)
      }
    },
    tooltip: {
      hide: boolean('hide tooltip', false)
    },
    animation: {
      duration: boolean('disable animation', false) ? 0 : ANIMATION_DURATION
    },
    loader: {
      show: boolean('show loader', false)
    }
  }

  return (
    <div style={{ width: '30%' }} className={s.ChartWrapper}>
      <Chart type='curve' data={data} config={config} />
    </div>
  )
}

export const NewDonut = (): JSX.Element => {
  const [datasets, setDatasets] = useState<any[]>([])
  const addDataSet = useCallback(() => {
    setDatasets((prev) => [
      ...prev,
      {
        label: `Data ${prev.length + 1}`,
        data: random(0, 120),
        backgroundColor: getRandomColor()
      }
    ])
  }, [setDatasets])

  const handleAddDataClick = (): void => {
    addDataSet()
  }

  const handleRemoveClick = (): void => {
    setDatasets((prev) => prev.slice(0, -1))
  }

  const handleAnimateClick = (): void => {
    setDatasets((prev) => {
      return prev.map(({ ...rest }) => ({ ...rest, data: random(0, 120) }))
    })
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      addDataSet()
      addDataSet()
    }, 2000)

    return () => clearTimeout(timer)
  }, [addDataSet])

  const config = {
    chart: {
      arcWidth: number('Arc width', 30),
      barOpacity: number('Bar opacity', 0.7),
      padAngle: number('Pad angle', 0.05),
      innerCircle: {
        arcWidth: number('Inner circle arc width', 0),
        opacity: number('Inner circle arc opacity', 0.14)
      }
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION / 2
    },
    tooltip: {
      hide: boolean('Hide tooltip', true)
    },
    legend: {
      hide: boolean('Hide legend', false),
      hideTitle: boolean('Hide legend title', false)
    },
    loader: {
      show: boolean('Show loader', false),
      label: 'LOADING DATA',
      color: '#866CFF'
    }
  }
  const data = {
    datasets
  }
  const chartSettings = { type: 'new-donut', data, config }

  const showLabels = boolean('Show labels', true)
  return (
    <div style={{ width: '20%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
        <button onClick={handleAddDataClick}>Add data</button>
        <button onClick={handleRemoveClick}>Remove data</button>
      </div>
      {showLabels ? (
        <LabelsWrap chartSettings={chartSettings} />
      ) : (
        <Chart {...chartSettings} />
      )}
    </div>
  )
}

export const HeatMapChart = (): JSX.Element => {
  const [value, setValue] = React.useState(null as any)

  React.useEffect(() => {
    const result = heatMapData.map(({ value, ...rest }) => ({
      value: value + Math.random(),
      ...rest
    }))
    const timer = setTimeout(() => {
      setValue(result)
    }, 2000)
    return () => clearTimeout(timer)
  }, [])

  const click = (): void => {
    const result = heatMapData.map(({ value, ...rest }) => ({
      value: value + Math.random(),
      ...rest
    }))
    setValue(result)
  }

  const config = {
    chart: {
      color: color('Background color', '#866cff'),
      offset: {
        vertical: number('Vertical offset', 7),
        horizontal: number('Horizontal offset', 5)
      }
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION / 4
    }
  }

  return (
    <div style={{ width: '70%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={click}>Animate</button>
      </div>
      <Chart type='heatMap' data={value} config={config} />
    </div>
  )
}

export const Goal = (): JSX.Element => {
  const chartColor = color('Color', '#FF5860')
  return (
    <div className={s.ChartWrapper}>
      <Chart
        type='goal'
        stepColors={[chartColor]}
        border={number('Border width', 5)}
        data={number('Progress', 71, {
          min: 0,
          max: 100,
          step: 1,
          range: true
        })}
        width={number('Width', 100)}
        height={number('Height', 100)}
        useBackground
      >
        {text('Label', 'likes')}
      </Chart>
    </div>
  )
}

export const GoalWithValue = (): JSX.Element => {
  return (
    <div className={s.ChartWrapper}>
      <Chart
        type='goal'
        stepColors={['#FF5860', '#FF9600', '#33C635']}
        border={number('Border width', 5)}
        data={number('Progress', 71, {
          min: 0,
          max: 100,
          step: 1,
          range: true
        })}
        width={number('Width', 100)}
        height={number('Height', 100)}
        showValue
      />
    </div>
  )
}

const image = 'https://miro.medium.com/max/1200/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg'

export const GoalWithImage = (): JSX.Element => {
  return (
    <div className={s.ChartWrapper}>
      <Chart
        type='goal'
        stepColors={['#FF5860', '#FF9600', '#33C635']}
        imgSrc={image}
        imgGap={number('Image gap', 2)}
        border={number('Border width', 5)}
        data={number('Progress', 71, {
          min: 0,
          max: 100,
          step: 1,
          range: true
        })}
        width={number('Width', 100)}
        height={number('Height', 100)}
      />
    </div>
  )
}

export const Spider = (): JSX.Element => {
  const labels = ['Folowers', 'Comments', 'Posts', 'Eng. rate', 'Likes']
  const [datasets, setDatasets] = useState<any[]>([])
  const addDataSet = useCallback(() => {
    setDatasets((prev) => [
      ...prev,
      {
        label: `Competitor ${prev.length + 1}`,
        data: getRandomArr(labels.length),
        backgroundColor: getRandomColor()
      }
    ])
  }, [setDatasets])

  const handleAnimateClick = (): void => {
    setDatasets((prev) => {
      return prev.map(({ ...rest }) => ({
        ...rest,
        data: getRandomArr(labels.length)
      }))
    })
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      addDataSet()
      addDataSet()
    }, 2000)

    return () => clearTimeout(timer)
  }, [addDataSet])

  const data = {
    labels,
    datasets
  }

  const config = {
    tooltip: {
      hide: boolean('Hide tooltip', false)
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION / 2
    },
    loader: {
      show: boolean('Show loader', false)
    }
  }

  return (
    <div style={{ width: '35%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
      </div>
      <Chart type='spider' data={data} config={config} />
    </div>
  )
}

export const DivergingBar = (): JSX.Element => {
  const [datasets, setDatasets] = useState<any[]>([])
  const defaultColors = ['#FF5860', '#FFCDCF', '#BEC4CD', '#C2EEC2', '#33C635']
  const colors = array('Colors array', defaultColors)
  const defaultLabels = [
    'Strongly disagree',
    'Disagree',
    'Not Sure',
    'Agree',
    'Strongly agree'
  ]
  const labels = array('Labels array', defaultLabels)

  const addDataSet = useCallback(() => {
    setDatasets((prev) => [
      ...prev,
      {
        label: `Data ${prev.length + 1}`,
        data: getRandomArr(labels.length),
        backgroundColor: colors
      }
    ])
  }, [setDatasets])

  const handleAddDataClick = (): void => {
    addDataSet()
  }

  const handleRemoveClick = (): void => {
    setDatasets((prev) => prev.slice(0, -1))
  }

  const handleAnimateClick = (): void => {
    setDatasets((prev) => {
      return prev.map(({ ...rest }) => ({
        ...rest,
        data: getRandomArr(labels.length)
      }))
    })
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      addDataSet()
      addDataSet()
      addDataSet()
    }, 2000)

    return () => clearTimeout(timer)
  }, [addDataSet])

  const data = {
    labels,
    datasets
  }

  const config = {
    chart: {
      barPadding: number('Bar padding', 0.3),
      isAllPositive: boolean('Is all data positive', false),
      barHeight: number('Bar height', 0)
    },
    scales: {
      x: {
        hide: boolean('hide X scale', false),
        styles: {
          'font-size': text('X axis font size', '11px'),
          color: color('X axis color', '#7E8B9D')
        },
        ticks: number('Approximate X ticks amount', 10)
      },
      y: {
        hide: boolean('hide Y scale', false),
        styles: {
          'font-size': text('Y axis font size', '11px'),
          color: color('Y axis color', '#7E8B9D')
        }
      }
    },
    tooltip: {
      hide: boolean('Hide tooltip', false),
      showPercent: boolean('Show percents in tooltip', true)
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION
    },
    loader: {
      show: boolean('Show loader', false),
      label: 'LOADING DATA',
      color: '#866CFF'
    }
  }

  return (
    <div style={{ width: '60%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
        <button onClick={handleAddDataClick}>Add data</button>
        <button onClick={handleRemoveClick}>Remove</button>
      </div>
      <Chart type='diverging' data={data} config={config} />
    </div>
  )
}

export const PolarAreaChart = (): JSX.Element => {
  const [polarData, setPolarData] = React.useState<any>([])

  const addPolarData = useCallback(() => {
    setPolarData((prev: any) => [
      ...prev,
      {
        label: `Data ${(prev.length as number) + 1}`,
        data: random(0, 120),
        backgroundColor: getRandomColor()
      }
    ])
  }, [setPolarData])

  React.useEffect(() => {
    const timer = setTimeout(() => {
      addPolarData()
      addPolarData()
      addPolarData()
    }, 2000)
    return () => {
      clearTimeout(timer)
    }
  }, [])

  const handleAddDataClick = (): void => {
    addPolarData()
  }

  const handleRemoveClick = (): void => {
    setPolarData((prev: any) => prev.slice(0, -1))
  }

  const handleAnimateClick = (): void => {
    setPolarData((prev: any) => {
      return prev.map(({ ...rest }) => ({ ...rest, data: random(0, 120) }))
    })
  }

  const data = {
    datasets: polarData
  }

  const config = {
    chart: {
      barOpacity: number('Bar opacity', 0.7)
    },
    tooltip: {
      hide: boolean('Hide tooltip', false)
    },
    animation: {
      duration: boolean('Disable animation', false) ? 0 : ANIMATION_DURATION
    },
    scales: {
      min: number('Scale min value', 0),
      max: number('Scale max value', 120)
    },
    loader: {
      show: boolean('Show loader', false)
    }
  }

  const showLabels = boolean('Show labels', true)

  const chartSettings = {
    type: 'polar-area',
    data,
    config
  }

  return (
    <div style={{ width: '20%' }} className={s.ChartWrapper}>
      <div className={s.controlButtons}>
        <button onClick={handleAnimateClick}>Animate</button>
        <button onClick={handleAddDataClick}>Add data</button>
        <button onClick={handleRemoveClick}>Remove data</button>
      </div>
      {showLabels ? (
        <LabelsWrap chartSettings={chartSettings} />
      ) : (
        <Chart {...chartSettings} />
      )}
    </div>
  )
}
